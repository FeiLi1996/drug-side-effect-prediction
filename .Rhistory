library(tidyverse)
library(caTools)
library(readr)
library(data.table)
library(openxlsx)
df<-openxlsx::read.xlsx('dataset.xlsx')
datatable <- as.data.table(df)
datatable
#view summary of dataset
summary(df)
glimpse(df)
#Temporary converts a datatable's character datatypes into factor. This way when summarize function is used, it lists out the counts of the categorical variables
factorize_str <- function (dt){
#Making a copy to not affect the original datatable
dt_copy <- copy(dt)
for (col_name in colnames(dt_copy)){
if (is.character(dt_copy[[col_name]])){
set(dt_copy, j = col_name, value = as.factor(dt_copy[[col_name]]))
}
}
dt_copy
}
df<-openxlsx::read.xlsx('dataset.xlsx')
dt <- as.data.table(df)
dt
#view summary of dataset
summary(factorize_str(dt)
glimpse(dt)
df<-openxlsx::read.xlsx('dataset.xlsx')
dt <- as.data.table(df)
dt
#view summary of dataset
summary(factorize_str(dt))
glimpse(dt)
library(tidyverse)
library(caTools)
library(readr)
library(data.table)
library(openxlsx)
library(rpart)
library(rpart.plot)
library(tidyverse)
library(caTools)
library(readr)
library(data.table)
library(openxlsx)
library(rpart)
library(rpart.plot)
library(caret)
df<-openxlsx::read.xlsx('dataset.xlsx')
dt <- as.data.table(df)
dt
#view summary of dataset
summary(factorize_str(dt))
glimpse(dt)
trainIndex <- createDataPartition(dt$has_aki, p = .8,
list = FALSE,
times = 1)
head(trainIndex)
train_dt <- dt[ trainIndex,]
test_dt  <- dt[-trainIndex,]
train_dt <- dt[ trainIndex,]
test_dt  <- dt[-trainIndex,]
prop.table(table(train_dt$has_aki))
prop.table(table(test_dt$has_aki))
trainIndex <- createDataPartition(dt$has_aki, p = .7,
list = FALSE,
times = 1)
head(trainIndex)
train_dt <- dt[ trainIndex,]
test_dt  <- dt[-trainIndex,]
prop.table(table(train_dt$has_aki))
prop.table(table(test_dt$has_aki))
library(tidyverse)
library(data.table)
library(openxlsx)
library(rpart)
library(rpart.plot)
library(caret)
#Temporary converts a datatable's character datatypes into factor. This way when summarize function is used, it lists out the counts of the categorical variables
factorize_str <- function (dt){
#Making a copy to not affect the original datatable
dt_copy <- copy(dt)
for (col_name in colnames(dt_copy)){
if (is.character(dt_copy[[col_name]])){
set(dt_copy, j = col_name, value = as.factor(dt_copy[[col_name]]))
}
}
dt_copy
}
df <- openxlsx::read.xlsx('dataset synthetic 4.xlsx')
library(tidyverse)
library(data.table)
library(openxlsx)
library(rpart)
library(rpart.plot)
library(caret)
#Temporary converts a datatable's character datatypes into factor. This way when summarize function is used, it lists out the counts of the categorical variables
factorize_str <- function (dt){
#Making a copy to not affect the original datatable
dt_copy <- copy(dt)
for (col_name in colnames(dt_copy)){
if (is.character(dt_copy[[col_name]])){
set(dt_copy, j = col_name, value = as.factor(dt_copy[[col_name]]))
}
}
dt_copy
}
df <- openxlsx::read.xlsx('dataset synthetic 5.xlsx')
dt <- as.data.table(df)
dt
#view summary of dataset
summary(factorize_str(dt))
#check for NA
#Check for duplicate patients
#selecting relevant columns
dt <- dt[, .(gender,age,dose_category,daily_hydration_status,has_aki)]
#converting to factors
dt[ , gender:= as.factor(gender)]
dt[, dose_category := factor(dose_category, levels = c('low','med','high'))]
dt[, daily_hydration_status := factor(daily_hydration_status, levels = c('bad','good'))]
#set seed to regenerate the same graph
set.seed(10)
#Split into training/testing
trainIndex <- createDataPartition(dt$has_aki, p = .7,
list = FALSE,
times = 1)
train_dt <- dt[ trainIndex,]
test_dt  <- dt[-trainIndex,]
#Check if the proportions are similiar post split
prop.table(table(train_dt$has_aki))
prop.table(table(test_dt$has_aki))
train_dt
fit <- rpart(has_aki ~., data = train_dt, method = 'class')
rpart.plot(fit, extra = 106)
#see the rules
print(fit)
#prediction
#accuracy
library(tidyverse)
library(data.table)
library(openxlsx)
library(rpart)
library(rpart.plot)
library(caret)
#Temporary converts a datatable's character datatypes into factor. This way when summarize function is used, it lists out the counts of the categorical variables
factorize_str <- function (dt){
#Making a copy to not affect the original datatable
dt_copy <- copy(dt)
for (col_name in colnames(dt_copy)){
if (is.character(dt_copy[[col_name]])){
set(dt_copy, j = col_name, value = as.factor(dt_copy[[col_name]]))
}
}
dt_copy
}
df <- openxlsx::read.xlsx('dataset synthetic 5.xlsx')
dt <- as.data.table(df)
dt
#view summary of dataset
summary(factorize_str(dt))
#check for NA
#Check for duplicate patients
#selecting relevant columns
dt <- dt[, .(gender,age,dose_category,daily_hydration_status,has_aki)]
#converting to factors
dt[ , gender:= as.factor(gender)]
dt[, dose_category := factor(dose_category, levels = c('low','med','high'))]
dt[, daily_hydration_status := factor(daily_hydration_status, levels = c('bad','good'))]
#set seed to regenerate the same graph
set.seed(10)
#Split into training/testing
trainIndex <- createDataPartition(dt$has_aki, p = .7,
list = FALSE,
times = 1)
train_dt <- dt[ trainIndex,]
test_dt  <- dt[-trainIndex,]
#Check if the proportions are similiar post split
prop.table(table(train_dt$has_aki))
prop.table(table(test_dt$has_aki))
train_dt
fit <- rpart(has_aki ~., data = train_dt, method = 'class')
rpart.plot(fit, extra = 106)
#see the rules
print(fit)
#prediction
#accuracy
df <- openxlsx::read.xlsx('dataset synthetic 5.xlsx')
dt <- as.data.table(df)
dt
#view summary of dataset
summary(factorize_str(dt))
#check for NA
#Check for duplicate patients
dt[ ,.N , by='patient_id']
#check for NA
#Check for duplicate patients
dt[ ,.N , by='patient_id'][N>1]
#check for NA
round(colSums(is.na(dt)) * 100/nrow(dt) ,1)
#Check for duplicate patients
#Should return empty if the data is unique at patient level
dt[ ,.N , by='patient_id'][N>1]
group_agg2 <-   dt[, .(rx_cnt = .N,
is_pain_drug_pct = round(mean(is_pain_drug)*100,1),
is_target_drug_pct = round(mean(is_target_drug)*100,1)),
by = 'intervention_group']
library(tidyverse)
library(data.table)
library(openxlsx)
library(rpart)
library(rpart.plot)
library(caret)
factorize_str <- function (dt){
#Purpose:Temporary converts a datatable's character datatypes into factor. This way when summarize function is used, it lists out the counts of the categorical variables
#input:(datatable)
#output:(datatable) returns a copy of the datatable but with all the character datatypes as factors
#Making a copy to not affect the original datatable
dt_copy <- copy(dt)
for (col_name in colnames(dt_copy)){
if (is.character(dt_copy[[col_name]])){
set(dt_copy, j = col_name, value = as.factor(dt_copy[[col_name]]))
}
}
dt_copy
}
df <- openxlsx::read.xlsx('dataset synthetic 5.xlsx')
dt <- as.data.table(df)
dt
#view summary of dataset
summary(factorize_str(dt))
#check for NA and the percentage NA makes up for those columns with NA
round(colSums(is.na(dt)) * 100/nrow(dt) ,1)
#Check for duplicate patients
#Should return empty if the data is unique at patient level
dt[ ,.N , by='patient_id'][N>1]
#graphs???
#selecting relevant columns
dt_less_columns <- dt[, .(gender,age,dose_category,daily_hydration_status,has_aki)]
#converting to factors
dt_less_columns[ , gender:= as.factor(gender)]
dt_less_columns[, dose_category := factor(dose_category, levels = c('low','med','high'))]
dt_less_columns[, daily_hydration_status := factor(daily_hydration_status, levels = c('bad','good'))]
#set seed to regenerate the same graph
set.seed(10)
#Split into training/testing
trainIndex <- createDataPartition(dt$has_aki, p = .7,
list = FALSE,
times = 1)
train_dt <- dt_less_columns[ trainIndex,]
test_dt  <- dt_less_columns[-trainIndex,]
#Check if the proportions are similiar post split
prop.table(table(train_dt$has_aki))
prop.table(table(test_dt$has_aki))
train_dt
#'class' for method because we are interested in classification instead of regression
fit <- rpart(has_aki ~., data = train_dt, method = 'class')
rpart.plot(fit, extra = 106)
#see the rules
print(fit)
#prediction
#accuracy
library(tidyverse)
library(caTools)
library(readr)
library(data.table)
library(openxlsx)
library(factoextra)
library(cluster)
#Read in custom dataset
df<-openxlsx::read.xlsx('dataset.xlsx')
datatable <- as.data.table(df)
datatable
doctor_specialty_mapping <- unique(datatable[ , .(doctor_id,specialty)] , by=c('doctor_id','specialty'))
doctor_specialty_mapping
doctor_specialty_mapping [, custom_specialty := paste(specialty,doctor_id)]
doctor_specialty_mapping [,specialty:= NULL]
doctor_specialty_mapping
datatable_2 <- copy(datatable)
datatable_2 <- datatable_2 [ , .(doctor_id,specialty,therapeutic_labeling)]
datatable_2_agg <- datatable_2[ , .N , by =c('doctor_id','therapeutic_labeling')]
datatable_2_agg
#datatable_2_agg[ total_rx:=sum(N) , by='specialty']
datatable_2_agg[, total_rx := sum(N), by = 'doctor_id']
datatable_2_agg[ , rx_percentage := round((N/total_rx),1)]
datatable_2_agg
datatable_2_pivot <- pivot_wider(datatable_2_agg, id_cols = doctor_id, names_from = therapeutic_labeling, values_from = rx_percentage)
datatable_2_pivot
index_column_length <- length(colnames(datatable_2_pivot))
setnafill(datatable_2_pivot[ ,2:index_column_length], fill=0)
datatable_2_pivot
datatable_3_pivot <- merge( datatable_2_pivot, doctor_specialty_mapping , on='doctor_id')
datatable_3_pivot
datatable_3_pivot.index= datatable_3_pivot$custom_specialty
datatable_3_pivot.index
datatable_4_pivot <- datatable_3_pivot %>% select(-c(doctor_id, custom_specialty))
row.names(datatable_4_pivot) <- datatable_3_pivot$custom_specialty
#calculate principal components
results <- prcomp(datatable_4_pivot, scale = TRUE)
#reverse the signs
results$rotation <- -1*results$rotation
#display principal components
results$rotation
#Turn off scientific notation so we can view the decimals
options(scipen=999)
#calculate total variance explained by each principal component
pc_variances  <- results$sdev^2 / sum(results$sdev^2)
results$sdev^2 / sum(results$sdev^2)
pc_variances <- round( pc_variances , 2)
pc_variances
#reverse the signs of the scores
results$x <- -1*results$x
results$x
class(results$x)
df <- as.data.frame(results$x[ , 1:2])
class(df)
df
biplot(results, scale = 0 )
biplot(results, expand=10, xlim=c(0.0, 0.0), ylim=c(-0.1, 0.1))
pc_dt <- as.data.table(results$x)
pc_dt <- cbind( datatable_3_pivot$custom_specialty,pc_dt[,.(PC1,PC2)])
pc_dt
#Just graphing the principal component values for samples
ggplot(pc_dt, aes(x=PC1, y=PC2)) +
geom_point() +
xlab(paste("PC1 : ", pc_variances[1], "%", sep="")) +
ylab(paste("PC2 : ", pc_variances[2], "%", sep="")) +
geom_text(label=pc_dt$V1 ,angle = 10 , vjust=1 ,size=3.5) + theme_bw()
fviz_nbclust(pc_dt[ , 2:3], kmeans, method = "wss")
#make this example reproducible
set.seed(1)
#perform k-means clustering with k = 4 clusters
km <- kmeans(pc_dt[ , 2:3], centers = 4, nstart = 25)
#view results
km
fviz_cluster(km, data = df) +
ggtitle(label='')
#fviz_cluster(km, data = df ,,geom="point")  + geom_text(label=pc_dt$V1 ,angle = 10 , vjust=1 ,size=3.5)
fviz_cluster(km, data = df) +
ggtitle(label='NPI Specialty Rx Behavior Cluster') +
theme(plot.title = element_text(hjust = 0.5))
#fviz_cluster(km, data = df ,,geom="point")  + geom_text(label=pc_dt$V1 ,angle = 10 , vjust=1 ,size=3.5)
#Just graphing the principal component values for samples
ggplot(pc_dt, aes(x=PC1, y=PC2)) +
geom_point() +
xlab(paste("PC1 : ", pc_variances[1], "%", sep="")) +
ylab(paste("PC2 : ", pc_variances[2], "%", sep="")) +
geom_text(label=pc_dt$V1 ,angle = 10 , vjust=1 ,size=3.5) + theme_bw() +
ggtitle(label='NPI Specialty Rx Behavior Cluster') +
theme(plot.title = element_text(hjust = 0.5))
